#------------------------------------------------------------------
# Introductional Video Tutorials
#------------------------------------------------------------------

# You will find helpful Video Tutorials about Version Control in VS Code
  Menu -> Help -> Video Tutorials -> Version control in VS Code

#------------------------------------------------------------------
# Exercise Version Control in Visual Studio Code
#------------------------------------------------------------------

#------------------------------------------------------------------
# Step 1: Create a local git repository
#------------------------------------------------------------------

# For this exercise, we need the following software/accounts:
- Git (Download-Link: https://git-scm.com/downloads)
- GitHub account (https://github.com)
- Visual Studio Code
- Python extension for Visual Studio Code
- Python with the conda environment 'spenv'

# Make sure, that the path to your Git installation can be found on your System
  --> Check the installation path on your computer
      e.g. under Windows, set the Path to 'C:\Program Files\Git\bin'
  --> to check whether Git can be found, in a Terminal window type:
  git --version
  
# Create a new folder 'myrepo' on your computer (e.g. on your Desktop)

# In Visual Studio Code, open the new folder 'myrepo'
  --> Menu -> File -> Open Folder

# Initialize your local Git repository
  In Visual Studio, open a new Terminal window
  --> Menu -> Terminal -> New Terminal (or CTRL+SHIFT+Â¨)
  Type: 
  git init

--> this will create a hidden folder .git (.../myrepo/.git)
--> in this folder, all neccessary files are created used for version control
--> to show hidden files in a folder under Windows, in the Terminal window type:
    dir /a:h

# In Visual Studio Code, inside a Terminal window, set your user name and email address:
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

#------------------------------------------------------------------
# Step 2: Create Python File
#------------------------------------------------------------------

# In Visual Studio Code, in your folder 'myrepo'
# --> add a new Python script 'histogram.py' with the following content:

'''module to plot a histogram'''

# Libraries
import numpy as np
import matplotlib.pyplot as plt

# Histogram
n_bins = 50
x = np.random.randn(1000, 3)
colors = ['blue', 'orange', 'green']
plt.hist(x,
         n_bins,
         histtype='bar',
         stacked=True,
         label=colors)
plt.legend(loc="upper right")
plt.title('Stacked-histogram')

plt.show()

#------------------------------------------------------------------
# Step 3: Run the Python code
#------------------------------------------------------------------

# To run the Python code in histogram.py:
# Use CTRL+SHIFT+P -> Python Select Interpreter -> <<select your conda environment>>
# Then:
# Option (1):
# Right-click anywhere in the editor window and select Run Python File in Terminal
# Option (2):
# Select one or more code lines, then press Shift+Enter or right-click and select Run Selection/Line in Python Terminal.

#------------------------------------------------------------------
# Step 4: Safe your file -> Comit -> Publish Branch
#------------------------------------------------------------------

# In Visual Studio Code, click on the Source Control icon (or CTRL+SHIFT+G)
# Add a message like 'added histogram.py' and click on 'Commit'

# After this click on 'Publish Branch'
# If you are asked whether to publish in a privat or public repo, select 'public'
# --> that's it!
#
# Now, go to your GitHub Repository and check the success (sometimes a reload of the GitHub website is required)

#------------------------------------------------------------------
# Step 5: Modify your Python code -> Comit -> Push 
#------------------------------------------------------------------

# In Visual Studio Code, make some changes in your histogram.py file
# --> you can, for example, change the colors of the histogram
# --> save the file

# Before you comit the changes, click on the file name in the Explorer window (under 'Changes')
# --> you will see two file versions (before & after) side by side

# To push the changes to your Git Hub repository
# Save the file -> Comit -> Sync Changes
# Go to your GitHub Repository and check the success (sometimes a reload of the GitHub website is required)
